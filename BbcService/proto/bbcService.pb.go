// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bbcService.proto

/*
Package bbcservice is a generated protocol buffer package.

It is generated from these files:
	bbcService.proto

It has these top-level messages:
	NewsRequest
	NewsReply
*/
package bbcservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type NewsRequest struct {
	Minutes string `protobuf:"bytes,1,opt,name=minutes" json:"minutes,omitempty"`
}

func (m *NewsRequest) Reset()                    { *m = NewsRequest{} }
func (m *NewsRequest) String() string            { return proto.CompactTextString(m) }
func (*NewsRequest) ProtoMessage()               {}
func (*NewsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NewsRequest) GetMinutes() string {
	if m != nil {
		return m.Minutes
	}
	return ""
}

// The response message containing the greetings
type NewsReply struct {
	Text string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
}

func (m *NewsReply) Reset()                    { *m = NewsReply{} }
func (m *NewsReply) String() string            { return proto.CompactTextString(m) }
func (*NewsReply) ProtoMessage()               {}
func (*NewsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NewsReply) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func init() {
	proto.RegisterType((*NewsRequest)(nil), "bbcservice.NewsRequest")
	proto.RegisterType((*NewsReply)(nil), "bbcservice.NewsReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BbcService service

type BbcServiceClient interface {
	// Sends a greeting
	GetNews(ctx context.Context, in *NewsRequest, opts ...grpc.CallOption) (BbcService_GetNewsClient, error)
}

type bbcServiceClient struct {
	cc *grpc.ClientConn
}

func NewBbcServiceClient(cc *grpc.ClientConn) BbcServiceClient {
	return &bbcServiceClient{cc}
}

func (c *bbcServiceClient) GetNews(ctx context.Context, in *NewsRequest, opts ...grpc.CallOption) (BbcService_GetNewsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BbcService_serviceDesc.Streams[0], c.cc, "/bbcservice.BbcService/getNews", opts...)
	if err != nil {
		return nil, err
	}
	x := &bbcServiceGetNewsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BbcService_GetNewsClient interface {
	Recv() (*NewsReply, error)
	grpc.ClientStream
}

type bbcServiceGetNewsClient struct {
	grpc.ClientStream
}

func (x *bbcServiceGetNewsClient) Recv() (*NewsReply, error) {
	m := new(NewsReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for BbcService service

type BbcServiceServer interface {
	// Sends a greeting
	GetNews(*NewsRequest, BbcService_GetNewsServer) error
}

func RegisterBbcServiceServer(s *grpc.Server, srv BbcServiceServer) {
	s.RegisterService(&_BbcService_serviceDesc, srv)
}

func _BbcService_GetNews_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NewsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BbcServiceServer).GetNews(m, &bbcServiceGetNewsServer{stream})
}

type BbcService_GetNewsServer interface {
	Send(*NewsReply) error
	grpc.ServerStream
}

type bbcServiceGetNewsServer struct {
	grpc.ServerStream
}

func (x *bbcServiceGetNewsServer) Send(m *NewsReply) error {
	return x.ServerStream.SendMsg(m)
}

var _BbcService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bbcservice.BbcService",
	HandlerType: (*BbcServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getNews",
			Handler:       _BbcService_GetNews_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bbcService.proto",
}

func init() { proto.RegisterFile("bbcService.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 174 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0x4a, 0x4a, 0x0e,
	0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4a, 0x4a,
	0x4a, 0x2e, 0x86, 0x88, 0x28, 0xa9, 0x73, 0x71, 0xfb, 0xa5, 0x96, 0x17, 0x07, 0xa5, 0x16, 0x96,
	0xa6, 0x16, 0x97, 0x08, 0x49, 0x70, 0xb1, 0xe7, 0x66, 0xe6, 0x95, 0x96, 0xa4, 0x16, 0x4b, 0x30,
	0x2a, 0x30, 0x6a, 0x70, 0x06, 0xc1, 0xb8, 0x4a, 0xf2, 0x5c, 0x9c, 0x10, 0x85, 0x05, 0x39, 0x95,
	0x42, 0x42, 0x5c, 0x2c, 0x25, 0xa9, 0x15, 0x25, 0x50, 0x35, 0x60, 0xb6, 0x91, 0x37, 0x17, 0x97,
	0x13, 0xdc, 0x26, 0x21, 0x5b, 0x2e, 0xf6, 0xf4, 0xd4, 0x12, 0x90, 0x0e, 0x21, 0x71, 0x3d, 0x84,
	0x7d, 0x7a, 0x48, 0x96, 0x49, 0x89, 0x62, 0x4a, 0x14, 0xe4, 0x54, 0x2a, 0x31, 0x18, 0x30, 0x3a,
	0xe9, 0x73, 0x49, 0xe5, 0x66, 0x26, 0x17, 0xe5, 0x3b, 0x16, 0x17, 0x1b, 0xea, 0x21, 0x8c, 0xd5,
	0x07, 0x7b, 0xc0, 0x89, 0x1f, 0x21, 0x12, 0x00, 0x12, 0x08, 0x60, 0x4c, 0x62, 0x03, 0xcb, 0x18,
	0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb7, 0xbc, 0x56, 0x6c, 0xee, 0x00, 0x00, 0x00,
}
