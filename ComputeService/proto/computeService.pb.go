// Code generated by protoc-gen-go. DO NOT EDIT.
// source: computeService.proto

/*
Package computeService is a generated protocol buffer package.

It is generated from these files:
	computeService.proto

It has these top-level messages:
	TweetsRequest
	TweetsReply
*/
package computeService

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type TweetsRequest struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Minutes string `protobuf:"bytes,2,opt,name=minutes" json:"minutes,omitempty"`
}

func (m *TweetsRequest) Reset()                    { *m = TweetsRequest{} }
func (m *TweetsRequest) String() string            { return proto.CompactTextString(m) }
func (*TweetsRequest) ProtoMessage()               {}
func (*TweetsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TweetsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TweetsRequest) GetMinutes() string {
	if m != nil {
		return m.Minutes
	}
	return ""
}

// The response message containing the greetings
type TweetsReply struct {
	Text string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
}

func (m *TweetsReply) Reset()                    { *m = TweetsReply{} }
func (m *TweetsReply) String() string            { return proto.CompactTextString(m) }
func (*TweetsReply) ProtoMessage()               {}
func (*TweetsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TweetsReply) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func init() {
	proto.RegisterType((*TweetsRequest)(nil), "computeService.TweetsRequest")
	proto.RegisterType((*TweetsReply)(nil), "computeService.TweetsReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ComputeService service

type ComputeServiceClient interface {
	GetTweets(ctx context.Context, in *TweetsRequest, opts ...grpc.CallOption) (ComputeService_GetTweetsClient, error)
}

type computeServiceClient struct {
	cc *grpc.ClientConn
}

func NewComputeServiceClient(cc *grpc.ClientConn) ComputeServiceClient {
	return &computeServiceClient{cc}
}

func (c *computeServiceClient) GetTweets(ctx context.Context, in *TweetsRequest, opts ...grpc.CallOption) (ComputeService_GetTweetsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ComputeService_serviceDesc.Streams[0], c.cc, "/computeService.computeService/getTweets", opts...)
	if err != nil {
		return nil, err
	}
	x := &computeServiceGetTweetsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ComputeService_GetTweetsClient interface {
	Recv() (*TweetsReply, error)
	grpc.ClientStream
}

type computeServiceGetTweetsClient struct {
	grpc.ClientStream
}

func (x *computeServiceGetTweetsClient) Recv() (*TweetsReply, error) {
	m := new(TweetsReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ComputeService service

type ComputeServiceServer interface {
	GetTweets(*TweetsRequest, ComputeService_GetTweetsServer) error
}

func RegisterComputeServiceServer(s *grpc.Server, srv ComputeServiceServer) {
	s.RegisterService(&_ComputeService_serviceDesc, srv)
}

func _ComputeService_GetTweets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TweetsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ComputeServiceServer).GetTweets(m, &computeServiceGetTweetsServer{stream})
}

type ComputeService_GetTweetsServer interface {
	Send(*TweetsReply) error
	grpc.ServerStream
}

type computeServiceGetTweetsServer struct {
	grpc.ServerStream
}

func (x *computeServiceGetTweetsServer) Send(m *TweetsReply) error {
	return x.ServerStream.SendMsg(m)
}

var _ComputeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "computeService.computeService",
	HandlerType: (*ComputeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getTweets",
			Handler:       _ComputeService_GetTweets_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "computeService.proto",
}

func init() { proto.RegisterFile("computeService.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 199 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x49, 0xce, 0xcf, 0x2d,
	0x28, 0x2d, 0x49, 0x0d, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0xe2, 0x43, 0x15, 0x55, 0xb2, 0xe5, 0xe2, 0x0d, 0x29, 0x4f, 0x4d, 0x2d, 0x29, 0x0e, 0x4a,
	0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe2, 0x62, 0xc9, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54,
	0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x85, 0x24, 0xb8, 0xd8, 0x73, 0x33, 0xf3, 0x4a, 0x4b, 0x52,
	0x8b, 0x25, 0x98, 0xc0, 0xc2, 0x30, 0xae, 0x92, 0x22, 0x17, 0x37, 0x4c, 0x7b, 0x41, 0x4e, 0x25,
	0x48, 0x73, 0x49, 0x6a, 0x45, 0x09, 0x4c, 0x33, 0x88, 0x6d, 0x14, 0xcb, 0x85, 0x66, 0xa7, 0x90,
	0x37, 0x17, 0x67, 0x7a, 0x6a, 0x09, 0x44, 0x9f, 0x90, 0xac, 0x1e, 0x9a, 0x3b, 0x51, 0x9c, 0x23,
	0x25, 0x8d, 0x4b, 0xba, 0x20, 0xa7, 0x52, 0x89, 0xc1, 0x80, 0xd1, 0xc9, 0x91, 0x4b, 0x23, 0x39,
	0x3f, 0x57, 0xcf, 0x37, 0xb1, 0xa4, 0x24, 0x38, 0x23, 0x31, 0x27, 0x27, 0xbf, 0x5c, 0x2f, 0x37,
	0x33, 0xb9, 0x28, 0xdf, 0xb1, 0xb8, 0xd8, 0x10, 0x4d, 0xaf, 0x93, 0xb0, 0x33, 0x0a, 0x3f, 0x00,
	0x14, 0x22, 0x01, 0x8c, 0x49, 0x6c, 0xe0, 0xa0, 0x31, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x51,
	0xd2, 0x3e, 0xcd, 0x32, 0x01, 0x00, 0x00,
}
